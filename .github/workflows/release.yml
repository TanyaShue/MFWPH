name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x64
          - os: windows-x64
            runner: windows-latest

          # macOS Intel
          - os: macos-x64
            runner: macos-13

          # macOS Apple Silicon
          - os: macos-arm64
            runner: macos-14

          # Linux x64
          - os: linux-x64
            runner: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Windows特定步骤 - 复制DLL文件
      - name: Copy DLL files (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path -Path "${{ github.workspace }}\DLL") {
            $dllFiles = Get-ChildItem -Path "${{ github.workspace }}\DLL" -File
            foreach ($file in $dllFiles) {
              Copy-Item -Path $file.FullName -Destination "${{ env.pythonLocation }}\$($file.Name)" -Force
              Write-Host "Copied $($file.Name) to ${{ env.pythonLocation }}"
            }
          } else {
            Write-Host "DLL folder not found."
          }

      # 构建应用
      - name: Build application
        id: build
        shell: bash
        run: |
          # 运行构建脚本
          python build.py --platform ${{ matrix.os }}
          
          # 查找生成的归档文件
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ARCHIVE=$(find ./dist -name "*.zip" -type f | head -1)
          else
            ARCHIVE=$(find ./dist -name "*.tar.gz" -type f | head -1)
          fi
          
          if [ -z "$ARCHIVE" ]; then
            echo "::error::Build failed - archive file was not created"
            exit 1
          fi
          
          # 重命名为标准格式
          ARCHIVE_NAME="MFWPH_${{ matrix.os }}$([[ '${{ runner.os }}' == 'Windows' ]] && echo '.zip' || echo '.tar.gz')"
          mv "$ARCHIVE" "./dist/$ARCHIVE_NAME"
          
          echo "archive_path=./dist/$ARCHIVE_NAME" >> $GITHUB_OUTPUT
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
          echo "Build completed: $ARCHIVE_NAME"

      # 上传构建产物
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: ${{ steps.build.outputs.archive_path }}
          retention-days: 7

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate Changelog
        id: changelog
        run: |
          # 获取当前标签
          CURRENT_TAG="${{ github.ref_name }}"
          echo "Current tag: $CURRENT_TAG"
          
          # 获取上一个标签
          PREVIOUS_TAG=$(git tag --sort=-creatordate | sed -n '2p')
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, using first commit"
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "Previous tag/commit: $PREVIOUS_TAG"
          
          # 生成变更日志
          CHANGELOG=$(git log --pretty=format:"* %s (%h)" "$PREVIOUS_TAG..$CURRENT_TAG")
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="* 首次发布"
          fi
          
          # 设置输出
          {
            echo 'CHANGELOG<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Prepare release files
        id: prepare
        run: |
          # 移动所有构建产物到发布目录
          mkdir -p release_files
          find ./artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" \) \
            -exec mv {} ./release_files/ \;
          
          # 列出所有文件
          echo "Release files:"
          ls -la ./release_files/

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 版本 ${{ github.ref_name }} 更新日志

            ${{ steps.changelog.outputs.CHANGELOG }}

            ---
            
            ### 下载链接
            
            | 平台 | 下载 |
            |------|------|
            | Windows x64 | MFWPH_windows-x64.zip |
            | macOS Intel | MFWPH_macos-x64.tar.gz |
            | macOS Apple Silicon | MFWPH_macos-arm64.tar.gz |
            | Linux x64 | MFWPH_linux-x64.tar.gz |
            
            ### 安装说明
            
            **Windows:**
            1. 下载并解压 ZIP 文件
            2. 运行 `MFWPH.exe`
            
            **macOS:**
            1. 下载并解压 TAR.GZ 文件：`tar -xzf MFWPH_macos-*.tar.gz`
            2. 运行：`./MFWPH`
            3. 首次运行可能需要在系统偏好设置中允许
            
            **Linux:**
            1. 下载并解压 TAR.GZ 文件：`tar -xzf MFWPH_linux-x64.tar.gz`
            2. 添加执行权限：`chmod +x MFWPH`
            3. 运行：`./MFWPH`

          draft: false
          prerelease: false
          artifacts: ./release_files/*
          artifactContentType: application/octet-stream
          artifactErrorsFailBuild: true

  cleanup:
    name: Cleanup
    needs: release
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Delete workflow artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            windows-x64-build
            macos-x64-build
            macos-arm64-build
            linux-x64-build
          failOnError: false