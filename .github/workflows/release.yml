name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          

      - name: Generate Changelog
        id: changelog
        shell: pwsh
        run: |
          # 获取当前标签
          $currentTag = "${{ github.ref_name }}"
          Write-Host "Current tag: $currentTag"
          
          # 获取上一个标签
          $previousTag = git describe --tags --abbrev=0 HEAD^ 2>$null
          if (-not $previousTag) {
            Write-Host "No previous tag found, using first commit"
            $previousTag = git rev-list --max-parents=0 HEAD
          }
          Write-Host "Previous tag/commit: $previousTag"
          
          # 生成变更日志
          $changelog = git log --pretty=format:"* %s (%h)" "$previousTag..$currentTag"
          if (-not $changelog) {
            $changelog = "* 首次发布"
          }
          
          # 设置变更日志为GitHub Actions输出变量
          $changelog = $changelog -replace "`n", "%0A"
          echo "CHANGELOG<<EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo $changelog | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          
          Write-Host "Generated changelog for release"

      - name: Copy DLL files to Python root
        shell: pwsh
        run: |
          if (Test-Path -Path "${{ github.workspace }}\DLL") {
            $dllFiles = Get-ChildItem -Path "${{ github.workspace }}\DLL" -File
            foreach ($file in $dllFiles) {
              Copy-Item -Path $file.FullName -Destination "${{ env.pythonLocation }}\$($file.Name)" -Force
              Write-Host "Copied $($file.Name) to ${{ env.pythonLocation }}"
            }
          } else {
            Write-Host "DLL folder not found."
          }

      - name: Run build script
        id: build
        run: |
          python build.py
          # Get the actual zip file name
          $zipFile = Get-ChildItem -Path "./dist" -Filter "MFWPH_*.zip" | Select-Object -First 1
          if ($zipFile) {
            # Copy to the expected name
            Copy-Item -Path $zipFile.FullName -Destination "./dist/MFWPH_RELEASE.zip" -Force
            Write-Host "Copied $($zipFile.Name) to MFWPH_RELEASE.zip"
            # Set output for later steps
            echo "ORIGINAL_ZIP_NAME=$($zipFile.Name)" >> $env:GITHUB_ENV
          } else {
            Write-Host "::error::Build failed - zip file was not created"
            exit 1
          }
          Write-Host "Zip file successfully created"

      - name: List files in dist directory
        run: |
          Write-Host "Contents of dist directory:"
          Get-ChildItem -Path ./dist -Recurse | Select-Object FullName
          Write-Host "Zip file details:"
          Get-Item -Path ./dist/MFWPH_RELEASE.zip | Select-Object FullName, Length, LastWriteTime

      - name: Create GitHub Release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 版本 ${{ github.ref_name }} 更新日志

            ${{ steps.changelog.outputs.CHANGELOG }}

          draft: false
          prerelease: false
          artifacts: ${{ github.workspace }}/dist/MFWPH_RELEASE.zip
          artifactContentType: application/zip
          artifactErrorsFailBuild: true